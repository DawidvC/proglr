_require "basis.smi"
_require "idict.sig"
_require "hashable.sig"
_require "hash-table.sig"

functor HashTable (Key : 
  sig
    type t
    val eq : t * t -> bool
    val hash : t -> word
  end
) = struct
  type init = int
  type key = Key.t
  type 'a table (=boxed)

  exception Absent

  val table : init -> 'a table
  val reset : 'a table -> init -> unit

  val size : 'a table -> int
  val member : 'a table -> key -> bool
  val insert : 'a table -> key -> 'a -> unit
  val remove : 'a table -> key -> unit
  val find : 'a table -> key -> 'a option
  val lookup : 'a table -> key -> 'a

  val operate : 'a table -> key -> (unit -> 'a) -> ('a -> 'a) -> 'a option * 'a

  val operate' : 'a table -> key -> (unit -> 'a option) -> ('a -> 'a option) -> 'a option * 'a option

  val insertMerge : 'a table -> key -> 'a -> ('a -> 'a) -> unit
  val lookupOrInsert : 'a table -> key -> (unit -> 'a) -> 'a
  val lookupOrInsert' : 'a table -> key -> (unit -> 'a) -> 'a * bool   (* true if already present *)

  val toList : 'a table -> (key * 'a) list
  val fold : (key * 'a * 'b -> 'b) -> 'b -> 'a table -> 'b
  val app : (key * 'a -> unit) -> 'a table -> unit
end
