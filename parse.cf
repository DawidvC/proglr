token Semi ";";
token Dot ".";
token As "::=";
token LBracket "[";
token RBracket "]";
token Underscore "_";
token LParen "(";
token RParen ")";
token Colon ":";
token TokenKw "token";
token OfKw "of";
token Integer of int;
token Double of real;
token Char of char;
token String of string;
token Ident of string;
token SeparatorKw "separator";
token TerminatorKw "terminator";
token NonemptyKw "nonempty";
token CoercionsKw "coercions";

-- A Grammar is a sequence of definitions

Grammar . Grammar ::= [Token] [Def] ;

[]  . [Token] ::= ;
(:) . [Token] ::= Token ";" [Token] ;

Keyword     . Token ::= "token" Ident String ;
AttrToken   . Token ::= "token" Ident "of" Ident ;
NoAttrToken . Token ::= "token" Ident ;

[]  . [Def] ::= ;
(:) . [Def] ::= Def ";" [Def] ;

[]  . [Item] ::= ;
(:) . [Item] ::= Item [Item] ;

--The rules of the grammar
Rule . Def ::= Label "." Cat "::=" [Item] ;

-- Items
Terminal  . Item ::= String ;
NTerminal . Item ::= Cat ;

-- Categories
ListCat  . Cat ::= "[" Cat "]" ;
IdCat    . Cat ::= Ident ;

-- functional labels
Id       . Label ::= Ident ; 
Wild     . Label ::= "_" ; 
ListE    . Label ::= "[" "]" ;
ListCons . Label ::= "(" ":" ")" ; 
ListOne  . Label ::= "(" ":" "[" "]" ")" ;

-- Pragmas
Separator.  Def ::= "separator" MinimumSize Cat String ;
Terminator. Def ::= "terminator" MinimumSize Cat String ;
Coercions.  Def ::= "coercions" Ident Integer ;

-- List size condition
MNonempty.  MinimumSize ::= "nonempty" ;
MEmpty.     MinimumSize ::=  ;
