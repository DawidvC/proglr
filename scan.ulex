%defs (
  open Token
  type lex_result = Token.token
  val eof = fn () => Token.EOF
  fun unescape s = case (String.fromCString s) of NONE => s | SOME s' => s'
);

%name Lexer;
%states IN_STRING;

%let letter = [a-zA-Z\u00c0-\u00ff] & [^\u00d7\u00f7];
%let capital = [A-Z\u00c0-\u00dd] & [^\u00d7];
%let small = [a-z\u00de-\u00ff] & [^\u00f7];
%let digit = [0-9];
%let ident = {letter} | {digit} | [_'];
%let space = [ \t\r\n];
%let quot = ["];
%let backslash = [\\];

<INITIAL> {letter} {ident}* => (IDENT yytext);
<INITIAL> ";" => (SEMI);
<INITIAL> "." => (DOT);
<INITIAL> "::=" => (AS);
<INITIAL> "_" => ( UNDERSCORE );
<INITIAL> {digit}+ => (INT (Option.valOf (Int.fromString (yytext))));
<INITIAL> {digit}+ "." {digit}+ ("e" ("-")? {digit}+)? => (FLOAT (Option.valOf (Real.fromString (yytext))));
<INITIAL> {quot} => (print "enter string\n"; YYBEGIN IN_STRING; continue ());
<INITIAL> {space}+ => (continue ());

<IN_STRING> ([^"]|{backslash}{quot})* => (print (unescape yytext ^ "\n"); STRING (unescape yytext)); 
<IN_STRING> {quot} => (print "end string\n"; YYBEGIN INITIAL; continue ());
